!(function(c) {
  var p = {
      buttonSize: "btn-md",
      buttonType: "btn-default",
      labelMargin: "10px",
      scrollable: !0,
      scrollableHeight: "250px",
      placeholder: { value: "", text: "" }
    },
    u = {
      FR: "Français",
      DE: "Deutsch",
      PT: "Português",
      GB: "English"
    };
  (c.flagStrap = function(t, e, a) {
    var i = this,
      r = (function(t) {
        var e = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz".split(
          ""
        );
        t || (t = Math.floor(Math.random() * e.length));
        for (var a = "", n = 0; n < t; n++)
          a += e[Math.floor(Math.random() * e.length)];
        return a;
      })(8);
    (i.countries = {}),
      (i.selected = { value: null, text: null }),
      (i.settings = { inputName: "country-" + r });
    var n = c(t),
      s = "flagstrap-" + r,
      o = "#" + s;
    i.init = function() {
      (i.countries = u),
        (i.countries = u),
        (i.settings = c.extend({}, p, e, n.data())),
        void 0 !== i.settings.countries && (i.countries = i.settings.countries),
        void 0 !== i.settings.inputId &&
          ((s = i.settings.inputId), (o = "#" + s)),
        n
          .addClass("flagstrap")
          .append(l)
          .append(d)
          .append(g),
        void 0 !== i.settings.onSelect &&
          i.settings.onSelect instanceof Function &&
          c(o).change(function(t) {
            e.onSelect(c(this).val(), this);
          }),
        c(o).hide();
    };
    var l = function() {
        var n = c("<select/>")
          .attr("id", s)
          .attr("name", i.settings.inputName);
        return (
          c.each(i.countries, function(t, e) {
            var a = { value: t };
            void 0 !== i.settings.selectedCountry &&
              i.settings.selectedCountry === t &&
              ((a = { value: t, selected: "selected" }),
              (i.selected = { value: t, text: e })),
              n.append(c("<option>", a).text(e));
          }),
          !1 !== i.settings.placeholder &&
            n.prepend(
              c("<option>", {
                value: i.settings.placeholder.value,
                text: i.settings.placeholder.text
              })
            ),
          n
        );
      },
      d = function() {
        var t = c(o)
            .find("option")
            .first()
            .text(),
          e = c(o)
            .find("option")
            .first()
            .val();
        if (
          ((t = i.selected.text || t),
          (e = i.selected.value || e) !== i.settings.placeholder.value)
        )
          var a = c("<i/>")
            .addClass("flagstrap-icon flagstrap-" + e.toLowerCase())
            .css("margin-bottom", "2px")
            .css("margin-right", i.settings.labelMargin);
        else a = c("<i/>").addClass("flagstrap-icon flagstrap-placeholder");
        var n = c("<span/>")
            .addClass("flagstrap-selected-" + r)
            .html(a)
            .append(t),
          s = c("<button/>")
            .attr("type", "button")
            .attr("data-toggle", "dropdown")
            .css("color", "#fff")
            .css("font-family", "Montserrat")
            .css("font-size", "20px")
            .css("font-weight", "400")
            .css("box-shadow", "3px 3px 5px 6px rgba(204, 204, 204, 0)")
            .css("margin-bottom", "23px")
            .attr("id", "flagstrap-drop-down-" + r)
            .addClass(
              "btn " +
                i.settings.buttonType +
                " " +
                i.settings.buttonSize +
                " dropdown-toggle"
            )
            .attr("onClick", '$( ".dropdown-menu" ).toggle()')
            .html(n);
        return (
          c("<span/>")
            .addClass("caret")
            .css("margin-left", i.settings.labelMargin)
            .insertAfter(n),
          s
        );
      },
      g = function() {
        var l = c("<ul/>")
          .attr("id", "flagstrap-drop-down-" + r + "-list")
          .attr("aria-labelled-by", "flagstrap-drop-down-" + r)
          .attr("onClick", '$( ".dropdown-menu" ).toggle()')
          .addClass("dropdown-menu");
        return (
          i.settings.scrollable &&
            l
              .css("height", "auto")
              .css("max-height", i.settings.scrollableHeight)
              .css("background-color", "#00000080")
              .css("color", "#fff")
              .css("overflow-x", "hidden"),
          c(o)
            .find("option")
            .each(function() {
              var t = c(this).text(),
                e = c(this).val();
              if (e !== i.settings.placeholder.value)
                var a = c("<i/>")
                  .addClass("flagstrap-icon flagstrap-" + e.toLowerCase())
                  .css("margin-right", i.settings.labelMargin)
                  .css("margin-bottom", "2px");
              else a = null;
              var n = c("<a/>")
                  .attr("data-val", c(this).val())
                  .attr("href", "../" + e.toLowerCase())
                  .addClass("dropdown-link")
                  .html(a)
                  .append(t)
                  .on("click", function(t) {
                    c(o).val(c(this).data("val")),
                      c(o).trigger("change"),
                      c(".flagstrap-selected-" + r).html(c(this).html()),
                      t.preventDefault();
                  }),
                s = c("<li/>").prepend(n);
              l.append(s);
            }),
          l
        );
      };
    i.init();
  }),
    (c.fn.flagStrap = function(e) {
      return this.each(function(t) {
        void 0 === c(this).data("flagStrap") &&
          c(this).data("flagStrap", new c.flagStrap(this, e, t));
      });
    });
})(jQuery);
